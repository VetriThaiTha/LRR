@using Lrr.Shared;
@inject IModalService modal  
<table class="reportTable">
        <thead class="reportHead">
            <tr  >
                <th class="td-report" colspan="3" > Auction detail</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td class="td-report" >
                    Auction end date:
                </td>
                <td class="td-report" >
                    @LrrState.AuctionDetails.EndDate.ToString("dd/MMM/yyyy")
                </td>
                <td class="td-notes" >@($"Registration date + (auction duration {LrrState.Configuration.AuctionDuration} months) ")</td>
            </tr>
            <tr class="tr-alice">
                <td class="td-report" >
                    Auction starting value:
                </td>
                <td class="td-report" >
                    ₹@LrrState.AuctionDetails.FmtStartingValue
                </td>
                <td class="td-notes" >@($"(Registration value ₹{@LrrState.AuctionDetails.FmtWhiteValue} ) * (Auction starting value multiple {LrrState.GetStartingValueMultiple()})")</td>
            </tr>

        </tbody>
</table>

<br />
<table class="reportTable">
        <thead class="reportHead">
            <tr  >
                <th class="td-report" colspan="3" > Auction decisions</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td class="td-report" >
                    Highest bid value:
                    <!-- 
                        Popup modal help demo
                    <span @onclick="@(()=>modal.Show<HelpPage>("Help"))" >?</span>-->
                </td>
                <td class="td-report" >
                    ₹<InputNumber class="formatinput" style="width:13ch" id="HighestBid" @bind-Value="HighestBid"    />
                    <label>@LrrState.FmtHelper.ShortFormat(HighestBid)</label>
                    <ValidationMessage For="@(()=>HighestBid)"></ValidationMessage>
                    <label style="color: red;" >@(BidValue_msg)</label>
                </td>
            </tr>
            <tr class="tr-alice">
                <td class="td-report" >
                    Provisional buyer's decision:
                </td>
                <td class="td-report" >
                    <select class="formatinput" @bind="Decision"  >
                        <option value=@Lrr.Shared.DecisionEnum.None > None </option>
                        @if (LrrState.HasValidBid())
                            {
                                <option value=@Lrr.Shared.DecisionEnum.MatchHighestBid  > Match highest Bid</option>
                                <option value=@Lrr.Shared.DecisionEnum.GiveUpToHighestBid > Give-up to highest Bid</option>
                            }
                    </select>
                </td>
            </tr>
        </tbody>
</table>

@code {


    [Parameter,EditorRequired] public Lrr.Shared.LrrState LrrState { get; set; }

    [Parameter, EditorRequired] public Action RefreshScreen { get; set; }


    private string BidValue_msg { get; set; }
    private int _bvalue { get; set; }

    public int HighestBid
    {
        get { return string.IsNullOrEmpty(BidValue_msg) ? LrrState.InputData.HighestBid : _bvalue; }
        set
        {
            BidValue_msg = string.Empty;
            _bvalue = value;
            if(_bvalue < 0)
            {
                BidValue_msg = "Highest bid value cannot be negative.";
                Decision = Lrr.Shared.DecisionEnum.None;
                return;
            }

            if(_bvalue < LrrState.AuctionDetails.StartingValue)
            {
                BidValue_msg = $"Highest bid value cannot be less than Auction starting value {LrrState.AuctionDetails.StartingValue}.";
                Decision = Lrr.Shared.DecisionEnum.None;
                return;
            }
            if (LrrState.InputData.HighestBid != value) {
                LrrState.InputData.HighestBid = value;
                ReCalculateValues();
            }
        }
    }


    public Lrr.Shared.DecisionEnum Decision
    {
        get { return LrrState.InputData.Decision; }
        set
        {
            if (LrrState.InputData.Decision != value) {
                LrrState.InputData.Decision = value;
                ReCalculateValues();
            }
        }
    }

    private bool hasErrors()
    {
        return !(string.IsNullOrEmpty(BidValue_msg));
    }

    private void ReCalculateValues()
    {
        if (hasErrors())
            return;

        LrrState.CalculateValues();
        if (RefreshScreen != null)
            RefreshScreen();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            ReCalculateValues();
    }
}
